Exploring the world:
-------------------
Almost all big companies use Config driven UI 


hook - is a javascript function , coming from React 

to create local varibales in application we use state varibales, to do that we have useState hook 

What makes react fast?
reconciliation - diff algorithm and virtual DOM makes the react fast 

React Fibre is new reconciliation algorithm

React is fast because of its fast DOM Manipulation , because it has diff algorithm , React Fibre 
reconciliation 
-----------------------------------------------------------------------------------------------
With the filter functionality we have written

once we search , our restaurantList is getting updated 
and when we try to search again , then we dont find any results because it is searching in the
filtered list and it is not there 


-----------------------------------------------------------------------------------------------
In the past we have single big application
even UI will be rested in the same project 
APIs,UI , SMS everything is in same thing 

we use to deploy whole application even for a small change 
everything in a single application , maintained at one place 
this architecture is known as MONOLITH architecture 

Now we are moving to microservcies architecture 
now we have seperate UI , API, logs, authentication , notification 
thus its easy to maintain , separation of concerns - each have a single responsibility
different tech stacks can be used 
all these projects will be deployed on different ports but same domain name 



-----------------------------------------------------------------------------------------------
We access api in javascript using - fetch , axios 

it is not a good way to call an api in a component , because for every re render the api 
is called 

there are 2 ways of calling 

1. user load the Page ==> fetch from api in some 300ms ==> render page and show content in 500ms 

2.user load the page ==> render something on screen ==> then call API ==> then update UI 

2nd way is good , as this will update UI very quickly 


react gives a hook - useEffect 


our component re renders 2 times - either state change or props changes


we call useEffect - by giving the callback function and a dependency array 
the callback function is called only when we need to call that useEffect want to call it 
dependency array - we pass on what it should depend on to call this useEffect

useEffect(()=>{
    console.log("render");
},[])

this callback function is called on every re render 
to avoid this pass in the empty array 

------

for suppose i want to call the useEffect based on some state variable
then pass in the dependency array 

useEffect(()=>{
    console.log('render');
},[searchText])


-----
this will be called on every re render 
useEffect(()=>{
    console.log('render');
})
-----
if i want to be called only once , pass in empty array as second parameter
useEffect(()=>{
    console.log('render');
},[])
------
if i want it be dependent on some  state varibale , pass it in array 
useEffect(()=>{
    console.log("render");
},[searchText]);
-----------------------------------------------------------------------------------------------
calling an api:

we might get cors error - as we are calling from our local host to a https api , browser gives this error
to by pass this install a plugin chrome - 
Allow CORS: Access-Control-Allow-Origin

useEffect is the best place to make an api call , read line by line below code 
it has api call using useEffect , filter function


import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState, useEffect } from 'react';

const filterData = (searchText, biryanis) => {
  const filterDatab = biryanis.filter((bir) => {
    // console.log(bir.data.name);
    return bir.data.name.includes(searchText);
  });

  return filterDatab;
};
const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState('');
  const [biryanis, setBiryanis] = useState(biryaniHouse);

  useEffect(() => {
    getRestaurants();
  }, []);

  async function getRestaurants() {
    const data = await fetch(
      'https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9351929&lng=77.62448069999999&page_type=DESKTOP_WEB_LISTING'
    );
    const json = await data.json();
    console.log(data);
    //always use optional chaining
    setBiryanis(json?.data?.cards[2]?.data?.data?.cards);
  }
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button
          className="search-btn"
          onClick={() => {
            //need to filter the data
            // console.log(searchText);
            // console.log(typeof searchText);

            const data = filterData(searchText, biryanis); //have to filter based on search text
            //entered in the search box, so 1st argument it is passed
            //and we have to filter from the state variable - biryanis
            //so 2nd argument it is called

            //then we have to update the biryaniHouse (array of objects)
            //we cannot do it directly , we have to maintain state of this variable
            //so create a state variable , using useState

            //then update the state - biryanis
            setBiryanis(data);
          }}
        >
          Search
        </button>
      </div>
      <div className="restaurant-list">
        {biryanis.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;


-----

const RestuarantCard = (props) => {
  return (
    <div className="card">
      <img
        src={
          'https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_508,h_320,c_fill/' +
          props.biryani?.data?.cloudinaryImageId
        }
        alt="Biryani"
      />
      <h2>{props.biryani?.data?.name}</h2>
      <h3>{props.biryani?.data?.cuisines?.join(', ')}</h3>
      <h4>‚≠ê {props.biryani?.data?.avgRating}</h4>
    </div>
  );
};
export default RestuarantCard;

-----------------------------------------------------------------------------------------------
Read about Shimmer UI 

this helps in better user Experience
-----------------------------------------------------------------------------------------------
we have to either render normal UI or shimmer UI 

lets use Conditional Rendering , we are using Shimmer UI - fill it with original ui 

import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState, useEffect } from 'react';
import Shimmer from './Shimmer';
const filterData = (searchText, biryanis) => {
  const filterDatab = biryanis.filter((bir) => {
    // console.log(bir.data.name);
    return bir.data.name.includes(searchText);
  });

  return filterDatab;
};
const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState('');
  const [biryanis, setBiryanis] = useState([]);

  useEffect(() => {
    getRestaurants();
  }, []);

  async function getRestaurants() {
    const data = await fetch(
      'https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9351929&lng=77.62448069999999&page_type=DESKTOP_WEB_LISTING'
    );
    const json = await data.json();
    console.log(data);
    //always use optional chaining
    setBiryanis(json?.data?.cards[2]?.data?.data?.cards);
  }

  //Conditional Rendering
  //if restuarant is empty=> show shimmer ui
  //if restaurant has data =>show actual data UI
  return biryanis.length === 0 ? (
    <Shimmer />
  ) : (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button
          className="search-btn"
          onClick={() => {
            //need to filter the data
            // console.log(searchText);
            // console.log(typeof searchText);

            const data = filterData(searchText, biryanis); //have to filter based on search text
            //entered in the search box, so 1st argument it is passed
            //and we have to filter from the state variable - biryanis
            //so 2nd argument it is called

            //then we have to update the biryaniHouse (array of objects)
            //we cannot do it directly , we have to maintain state of this variable
            //so create a state variable , using useState

            //then update the state - biryanis
            setBiryanis(data);
          }}
        >
          Search
        </button>
      </div>
      <div className="restaurant-list">
        {biryanis.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;

-----------------------------------------------------------------------------------------------
Lets fix the filter function:

we have to maintain two state varibales - one for filteredRestaurants and one for all restaurants 
we have to always display filteredRestaurants

making the search case insensitive

maintaining two state variables for allrestaurants and filteredRestaurants

Using Shimmer UI component 



import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState, useEffect } from 'react';
import Shimmer from './Shimmer';

const filterData = (searchText, biryanis) => {
  const filterDatab = biryanis.filter((bir) => {
    // console.log(bir.data.name);
    return bir?.data?.name?.toLowerCase()?.includes(searchText.toLowerCase());
  });

  return filterDatab;
};
const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState('');
  const [allbiryanis, setAllBiryanis] = useState([]);
  const [filteredbiryanis, setFilteredBiryanis] = useState([]);
  useEffect(() => {
    getRestaurants();
  }, []);

  async function getRestaurants() {
    const data = await fetch(
      'https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9351929&lng=77.62448069999999&page_type=DESKTOP_WEB_LISTING'
    );
    const json = await data.json();
    console.log(data);
    //always use optional chaining
    setAllBiryanis(json?.data?.cards[2]?.data?.data?.cards);
    setFilteredBiryanis(json?.data?.cards[2]?.data?.data?.cards);
  }

  //Conditional Rendering
  //if restuarant is empty=> show shimmer ui
  //if restaurant has data =>show actual data UI

  //if i dont have anything in allbiryanis - dont return anything
  //this is also called early return
  if (!allbiryanis) return null;

  //if there is no such product , we must display something
  if (filteredbiryanis?.length === 0)
    return <h1>No Restaurant Match to your filter</h1>;

  return allbiryanis.length === 0 ? (
    <Shimmer />
  ) : (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button
          className="search-btn"
          onClick={() => {
            //need to filter the data
            // console.log(searchText);
            // console.log(typeof searchText);

            const data = filterData(searchText, allbiryanis); //have to filter based on search text
            //entered in the search box, so 1st argument it is passed
            //and we have to filter from the state variable - biryanis
            //so 2nd argument it is called

            //then we have to update the biryaniHouse (array of objects)
            //we cannot do it directly , we have to maintain state of this variable
            //so create a state variable , using useState

            //then update the state - biryanis
            setFilteredBiryanis(data);
          }}
        >
          Search
        </button>
      </div>
      <div className="restaurant-list">
        {filteredbiryanis.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;


-----------------------------------------------------------------------------------------------


{inside this we can only show javascript  expression not statements }
{let a = 10;
console.log('this is invalid');
}
{
    ((a=10),console.log(a , this is perfectly valid ))
}
-----------------------------------------------------------------------------------------------
Lets build Login - Logout functionality 

import { useState } from 'react';
const Title = () => (
  <a href="/">
    <img
      className="logo"
      src="https://yt3.googleusercontent.com/ytc/AL5GRJXudT76175T4x4n7eslWM1YkgNLHDSSqfXGoadl=s900-c-k-c0x00ffffff-no-rj"
      alt="Food Villa"
    />
  </a>
);
const LoggedInUser = () => {
  //API call to check authentication
  return true;
};
const Header = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  return (
    <div className="header">
      <Title />
      <div className="nav-items">
        <ul>
          <li>Home</li>
          <li>About</li>
          <li>Contact</li>
          <li>Cart</li>
        </ul>
      </div>
      {isLoggedIn ? (
        <button onClick={() => setIsLoggedIn(false)}>Logout</button>
      ) : (
        <button onClick={() => setIsLoggedIn(true)}>Login</button>
      )}
    </div>
  );
};

export default Header;
