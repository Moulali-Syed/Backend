Lets get hooked:


lets first start our app - npm start

<></> is same <React.Fragment></React.Fragment> , this comes from React library

-----------------------------------------------------------------------------

We need to have proper modular structure 
generally it is practice to have src folder

lets place all files related to our app in to src folder 


It is good to have File structure
distribute components based on routes or functionality


create src folder -- move App.js inside it 
create components folder inside src - create a file for Title component 

exporting using default:
const Title = () => (
  <a href="/">
    <img
      className="logo"
      src="https://yt3.googleusercontent.com/ytc/AL5GRJXudT76175T4x4n7eslWM1YkgNLHDSSqfXGoadl=s900-c-k-c0x00ffffff-no-rj"
      alt="Food Villa"
    />
  </a>
);

export default Title;

if importing a default export then do as below
import Header from './components/Header';

---------------
we can also do a named export

export const Title = () => (
  <a href="/">
    <img
      className="logo"
      src="https://yt3.googleusercontent.com/ytc/AL5GRJXudT76175T4x4n7eslWM1YkgNLHDSSqfXGoadl=s900-c-k-c0x00ffffff-no-rj"
      alt="Food Villa"
    />
  </a>
);

if named export then import it as below 
import {Title} from './components/FileName';

-------------------------------------------------------------------------------------------
if we have multiple exports from a file , then we can import as below

import * as Obj from './components/Filename';
then we can do - Obj.Title 


-----

export const Header 
export const Title 

we can import as
import {Header,Title} from './components/FileName';

-------
if we have one default export and one named export

we can import as below 

import Header ,{Title} from './components/FileName';
-------------------------------------------------------------------------------------------
Named export , import 
default export ,import 

study about these
-------------------------------------------------------------------------------------------
Create separate js for each component 



-------------------------------------------------------------------------------------------
Always have a config file in the project 

we have hard coded values inside it 


-------------------------------------------------------------------------------------------
divide the whole code into component structure


-------------------------------------------------------------------------------------------
Now lets start building the search functionality:

React has one way data binding , we cannot edit the input text from the browser 
and can input some data by passing it in the code from a variable

import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';

const Body = () => {
  let searchTxt = 'KFC';//------------------------------------------<
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchTxt}//------------------------------------<
        />
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {biryaniHouse.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;


-------------------------------------------------------------------------------------------
say suppose i write a onChange event on the input element


import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';

const Body = () => {
  let searchTxt = 'KFC';//------------------------------------------<
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchTxt}//------------------------------------<
          onChange={(e)=>{searchTxt=e.target.value}}
        />
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {biryaniHouse.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;

iam using this -  onChange={(e)=>{searchTxt=e.target.value}}
event on my input element, will my value gets updated on typing no 

this wont work in React 

 onChange={(e)=>{console.log(e.target.value)}} , then on typing i can see in console
 but react try to re render everything and it find the variable
 which we declared searchTxt and updates the same text 


 this wont work in react 
 because react uses one way binding 


-------------------------------------------------------------------------------------------
Whenever we want to maintain a variable that needs to be changed 
we need to maintain a variable that is of react kind 

the react variable is kind of state variable

Every component in react maintains a state , we can put in all variables into that state 
every time u have to create a local variable , u have to use state inside react 

we have to use - useState hook to do this 

To create a local variable in react - we have to use state variable  
state variables are created using useState hook 

What is a hook?
hooks are normal functions , it has a specific functionality of it 

What is useState?
it is used to create state variables inside in a component 

useState() function returns an array - 1st element of array is variableName 
2nd element is a function to set value to that state variable

  //searchText is local state variable
  const [searchText] = useState();

  i can use searchText as a normal javascript variable - {searchText}

  in javascript we are creating a local variable and giving a default value 
  let searchTxt = "KFC";

  we can do that using useState as well
  const [searchText] = useState("KFC");

  we set the value using setState() function, 2nd parameter

   const [searchText, setSearchText] = useState();  //--------------------------
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)} //------------------------
        />
-------------------------------------------------------------------------------------------
Below is the example of useState hook:

import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState } from 'react';

const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState();
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button className="search-btn">Search - {searchText}</button>
      </div>
      <div className="restaurant-list">
        {biryaniHouse.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;


by using useState - we are able to achieve two way binding 
-------------------------------------------------------------------------------------------
When we have normal variables why do we need state variable?

if i use 

let constant = 11;

someone changed its value to 20 

my react will not know , that it has to change the value

say someone wrote code , on click on home button , update the constant variable

react doesnot know about this , it doesnot track this change , it will not update 

-----
If we want everytime to be sync with UI - u need to use the state variables 


example :

let a = 10;

<button onClick={a++}>Click</button>
<h1>a</h1>

on clicking button the value of a increases , but react doesnot know that it has to update
the UI 

----
so react says i dont keep a track of all the local variables , so 
we need to use state variable to update and keep in sync with UI 

React keeps track of state variables, whenever state variable is updated 
it keeps updating the UI 
-------------------------------------------------------------------------------------------
What is happening behind the state 

React keeps track of state varibales , it re renders the whole component
and it is doing reconciliation very fast , diff algorithm happens at the back 


useState hook example , toggling on button click from true to false and viceversa


import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState } from 'react';

const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState('hello');
  const [state, setState] = useState('true');
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button className="search-btn">Search - {searchText}</button>
        <button
          onClick={() => {
            if (state === 'true') {
              setState('false');
            } else {
              setState('true');
            }
          }}
        >
          {state}
        </button>
      </div>
      <div className="restaurant-list">
        {biryaniHouse.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;


-------------------------------------------------------------------------------------------
Implementing search functionality on button click - go line by line 


import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState } from 'react';

const filterData = (searchText, biryanis) => {
  const filterDatab = biryanis.filter((bir) => {
    return bir.name.includes(searchText);
  });

  return filterDatab;
};
const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState('');
  const [biryanis, setBiryanis] = useState(biryaniHouse);
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button
          className="search-btn"
          onClick={() => {
            //need to filter the data
            // console.log(searchText);
            // console.log(typeof searchText);

            const data = filterData(searchText, biryanis); //have to filter based on search text
            //entered in the search box, so 1st argument it is passed
            //and we have to filter from the state variable - biryanis
            //so 2nd argument it is called

            //then we have to update the biryaniHouse (array of objects)
            //we cannot do it directly , we have to maintain state of this variable
            //so create a state variable , using useState

            //then update the state - biryanis
            setBiryanis(data);
          }}
        >
          Search
        </button>
      </div>
      <div className="restaurant-list">
        {biryanis.map((bir, index) => {
          return <RestuarantCard biryani={bir} key={index} />;
        })}
      </div>
    </>
  );
};

export default Body;



-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------
