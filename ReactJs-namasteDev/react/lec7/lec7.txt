Finding the Path:
--------------------
usEffect default behaviour is to get called after render
if we dont specify dependency array then usEffect will get called for each re render

--------------------------------------------------------------------------------
never create a component inside component

never use - useState inside if condition
if(){
    const [state,setState] = useState()❌
}

never use - use useState inside for loop 

for(let i=0;i<3;i++){
    const [state,useState] = useState();❌
}

never use useState outside functional component ❌
--------------------------------------------------------------------------------
u can have any number of useEffect

--------------------------------------------------------------------------------
lets see how to use images from our local:

at the project level -create assets folder - inside create images folder 

import Logo from '../../assets/images/foodVilla.jpg';

const Title = () => (
  <a href="/">
    <img className="logo" src={Logo} alt="Food Villa" />
  </a>
);
--------------------------------------------------------------------------------
lets create Shimmer 

const Shimmer = () => {
  return (
    <>
      <div className="restaurant-list">
        {Array(15)
          .fill('')
          .map((e, index) => (
            <div key={index} className="shimmer-card"></div>
          ))}
      </div>
    </>
  );
};

export default Shimmer;


.restaurant-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  gap: 2rem;
}
.shimmer-card {
  width: 200px;
  height: 200px;
  background: lightgray;
  margin: 20px;
}


--------------------------------------------------------------------------------
to build forms in react  , use Formik

--------------------------------------------------------------------------------
Lets install react router dom 

npm i react-router-dom 

--------------------------------------------------------------------------------
Lets start seeing how routing works 


inside components folder , create About.js component
const About = () => {
  return (
    <div>
      <h1>About Us Page </h1>
      <p>This a react router dom session</p>
    </div>
  );
};
export default About;


/*
to create routing import as below
import { createBrowserRouter } from 'react-router-dom';

const appRouter = createBrowserRouter(
    [
        {
            path:"/",
            element:<AppLayout/>
        },{
            path:"/about",
            element:<About/>
        }
    ]
)


Then we also we need RouterProvider component from react-router-dom
*/

import React from 'react';
import ReactDOM from 'react-dom/client';
import Header from './components/Header';
import Body from './components/Body';
import Footer from './components/Footer';
import About from './components/About';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';

//header component

const AppLayout = () => {
  return (
    <React.Fragment>
      <Header />
      <Body />
      <Footer />
    </React.Fragment>
  );
};

const appRouter = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
  },
  {
    path: '/about',
    element: <About />,
  },
]);
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<RouterProvider router={appRouter} />);
--------------------------------------------------------------------------------
If we give some random url in browser , then react router dom gives us 
a error page 

we can create our own error page 

lets create a Error component 
and also react router dom provides us a hook that is smart enough to give error 


---
error component  

import { useRouteError } from 'react-router-dom';

const Error = () => {
  const err = useRouteError();
  return (
    <div>
      <h1>Oops!</h1>
      <h1>Something went wrong</h1>
      <h2>{err.status + ' : ' + err.statusText}</h2>
    </div>
  );
};

export default Error;


------
import React from 'react';
import ReactDOM from 'react-dom/client';
import Header from './components/Header';
import Body from './components/Body';
import Footer from './components/Footer';
import About from './components/About';
import Error from './components/Error';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';

//header component

const AppLayout = () => {
  return (
    <React.Fragment>
      <Header />
      <Body />
      <Footer />
    </React.Fragment>
  );
};

const appRouter = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    errorElement: <Error />,                 //<------------specify error component here -------------
  },
  {
    path: '/about',
    element: <About />,
  },
]);
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<RouterProvider router={appRouter} />);
--------------------------------------------------------------------------------
lets see Link tag 

if we use anchor tag - <a href=""></a> , this will refreshs the whole page 

so react-router-dom gives us - Link element 


There are 2 types of routing:
Client Side routing
Server side routing 

server side routing is the way all the data comes from server - in olden days 
we used to do network call for every url and load the html page this is server side routing


In react lets build - client side routing 
according to route we display the component 


though we use Link tag - in the browser elements it will be shown as anchor tag a 

import { useState } from 'react';
import Logo from '../../assets/images/foodVilla.jpg';
import { Link } from 'react-router-dom';//<-----------------------------------------

const Title = () => (
  <a href="/">
    <img className="logo" src={Logo} alt="Food Villa" />
  </a>
);
const LoggedInUser = () => {
  //API call to check authentication
  return true;
};
const Header = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  return (
    <div className="header">
      <Title />
      <div className="nav-items">
        <ul>
          <Link to="/">    //<-----------------------------------------
            <li>Home</li>
          </Link>          //<-----------------------------------------
          <Link to="about">
            <li>About</li>
          </Link>
          <li>Contact</li>
          <li>Cart</li>
        </ul>
      </div>
      {isLoggedIn ? (
        <button onClick={() => setIsLoggedIn(false)}>Logout</button>
      ) : (
        <button onClick={() => setIsLoggedIn(true)}>Login</button>
      )}
    </div>
  );
};

export default Header;

--------------------------------------------------------------------------------
Now we have a problem , whenever i go to new page our Header and Footer are not 
visible to us 

we need them to be there and the component to be loaded in between them 


I want my header and Footer to be always there , the content in between to be changing 
so we use Outlet - to render according to my config 
all the children will go into the Outlet 


based on the route - Outlet will be filled with corresponding component 


import React from 'react';
import ReactDOM from 'react-dom/client';
import Header from './components/Header';
import Body from './components/Body';
import Footer from './components/Footer';
import About from './components/About';
import Error from './components/Error';
import Contact from './components/Contact';
import { createBrowserRouter, RouterProvider, Outlet } from 'react-router-dom';
/*
      Header
        logo
        NavItems(RightSide)
        Cart
      Body
        Search Bar
        Restuarant list
          restaurant card
            image
            name
            rating
            cusines

      Footer
        links
     */

//header component

const AppLayout = () => {
  return (
    <React.Fragment>
      <Header />
      {
        /* <About /> // if path is /about
      <Body /> // if path is /
      <Contact /> // if path is /contact */
        // this is the outlet to fill in different pages
        //react-router-dom gives us Outlet - this is filled by the children configuration we need
      }
      <Outlet />
      <Footer />
    </React.Fragment>
  );
};

const appRouter = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    errorElement: <Error />,
    children: [
      {
        path: '/',
        element: <Body />,
      },
      {
        path: '/about',
        element: <About />,
      },
      {
        path: '/contact',
        element: <Contact />,
      },
    ],
  },
]);
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<RouterProvider router={appRouter} />);


whereever we need dynamic routing we use Outlet component , based on the path 
it will render the component according to route 

--------------------------------------------------------------------------------
Dynamic Routing/Dynamic Segments:

      {
        path: 'restaurant/:id',
      }

      id - here is dynamic 

lets create a component - RestuarantMenu 
and i should load my component on this path - based on the dynamic route 
--------------------------------------------------------------------------------
reading params from url , dynamic routes code 
read line by line 

import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';
import Shimmer from './Shimmer';
const RestuarantMenu = () => {
  //using this useParams hook , we read dynamic url params
  const params = useParams();
  //   console.log(params);

  const { id } = params;   //<-------------*******------------

  const [restaurant, setRestaurant] = useState(null);
  useEffect(() => {
    getRestaurantData();
  }, []);

  async function getRestaurantData() {
    const data = await fetch(
      'https://www.swiggy.com/dapi/menu/v4/full?lat=12.9351929&lng=77.62448069999999&menuId=' +
        id
    );
    const json = await data.json();
    console.log(json);
    setRestaurant(json.data);
  }

  return !restaurant ? (
    <Shimmer />
  ) : (
    <>
      <div>
        <h1>Restaurant id:{id}</h1>
        <h2>{restaurant.name}</h2>
        <img
          src={
            'https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_508,h_320,c_fill/' +
            restaurant.cloudinaryImageId
          }
          alt="food"
        />
        <h3>{restaurant.area}</h3>
        <h3>{restaurant.city}</h3>
        <h3>{restaurant.avgRating} ⭐ stars</h3>
        <h3>{restaurant.costForTwoMsg}</h3>
      </div>
      <div>
        <h1>Menu</h1>
        <ul>
          {/* {console.log(restaurant)} */}
          {Object.values(restaurant?.menu?.items).map((item) => (
            <li key={item.id}>{item.name}</li>
          ))}
        </ul>
      </div>
    </>
  );
};

export default RestuarantMenu;

--------

import { biryaniHouse } from '../config';
import RestuarantCard from './RestuarantCard';
import { useState, useEffect } from 'react';
import Shimmer from './Shimmer';
import { Link } from 'react-router-dom';
const filterData = (searchText, biryanis) => {
  const filterDatab = biryanis.filter((bir) => {
    // console.log(bir.data.name);
    return bir?.data?.name?.toLowerCase()?.includes(searchText.toLowerCase());
  });

  return filterDatab;
};
const Body = () => {
  // let searchTxt = 'KFC';
  //searchText is local state variable
  const [searchText, setSearchText] = useState('');
  const [allbiryanis, setAllBiryanis] = useState([]);
  const [filteredbiryanis, setFilteredBiryanis] = useState([]);
  useEffect(() => {
    getRestaurants();
  }, []);

  async function getRestaurants() {
    const data = await fetch(
      'https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9351929&lng=77.62448069999999&page_type=DESKTOP_WEB_LISTING'
    );
    const json = await data.json();
    console.log(data);
    //always use optional chaining
    setAllBiryanis(json?.data?.cards[2]?.data?.data?.cards);
    setFilteredBiryanis(json?.data?.cards[2]?.data?.data?.cards);
  }

  //Conditional Rendering
  //if restuarant is empty=> show shimmer ui
  //if restaurant has data =>show actual data UI

  //if i dont have anything in allbiryanis - dont return anything
  //this is also called early return
  if (!allbiryanis) return null;

  //if there is no such product , we must display something
  // if (filteredbiryanis?.length === 0)
  //   return <h1>No Restaurant Match to your filter</h1>;

  return allbiryanis.length === 0 ? (
    <Shimmer />
  ) : (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <button
          className="search-btn"
          onClick={() => {
            const data = filterData(searchText, allbiryanis); //have to filter based on search text
            setFilteredBiryanis(data);
          }}
        >
          Search
        </button>
      </div>
      <div className="restaurant-list">
        {filteredbiryanis.map((bir, index) => {
          return (
            <Link to={'/restaurant/' + bir.data.id} key={index}>   //<-----*******------------------
              <RestuarantCard biryani={bir} />;
            </Link>                                                 //<-----*******------------------
          );
        })}
      </div>
    </>
  );
};

export default Body;
------------

import React from 'react';
import ReactDOM from 'react-dom/client';
import Header from './components/Header';
import Body from './components/Body';
import Footer from './components/Footer';
import About from './components/About';
import Error from './components/Error';
import Contact from './components/Contact';
import RestuarantMenu from './components/RestuarantMenu';
import { createBrowserRouter, RouterProvider, Outlet } from 'react-router-dom';

//header component

const AppLayout = () => {
  return (
    <React.Fragment>
      <Header />
      {
        /* <About /> // if path is /about
      <Body /> // if path is /
      <Contact /> // if path is /contact */
        // this is the outlet to fill in different pages
        //react-router-dom gives us Outlet - this is filled by the children configuration we need
      }
      <Outlet />
      <Footer />
    </React.Fragment>
  );
};

const appRouter = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    errorElement: <Error />,
    children: [
      {
        path: '/',
        element: <Body />,
      },
      {
        path: '/about',
        element: <About />,
      },
      {
        path: '/contact',
        element: <Contact />,
      },

      {
        path: 'restaurant/:id',   //<----------***** this should be matching with the useParams we are reading***-----
        element: <RestuarantMenu />,
      },
    ],
  },
]);
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<RouterProvider router={appRouter} />);



--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

