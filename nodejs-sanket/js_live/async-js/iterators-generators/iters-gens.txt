Iterators:

function fetchNextElement(array) {
  let idx = 0;
  function next() {
    if (idx >= array.length) {
      return undefined;
    }
    const nextElement = array[idx];
    idx++;
    return nextElement;
  }
  return next;
}

//somewhere we consume it
const automaticFetcher = fetchNextElement([99, 11, 13, 15, 3, 9, 2, 1, 4]);

console.log(automaticFetcher());

console.log(automaticFetcher());

===========================================================================================
we can also return as an object 

function fetchNextElement(array) {
  let idx = 0;
  function next() {
    if (idx >= array.length) {
      return undefined;
    }
    const nextElement = array[idx];
    idx++;
    return nextElement;
  }
  return { next };
}

//somewhere we consume it
const automaticFetcher = fetchNextElement([99, 11, 13, 15, 3, 9, 2, 1, 4]);

console.log(automaticFetcher.next()); //99
console.log(automaticFetcher.next()); //11



===========================================================================================
iterator using Symbol.iterator:

let arr = [1, 2, 3];
iter = arr[Symbol.iterator]();
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
/*
{ value: 1, done: false }
{ value: 2, done: false }
{ value: 3, done: false }
{ value: undefined, done: true }
*/

===========================================================================================
//*generators:
/*
till now our functions keep on executing

we can break , execution of code inside a function, and then execute at a later point of time

written using syntax - function* 

generator function executes till it encounters yield keyword 
*/

function* genFunc() {
  console.log('Iam inside generator function');
  yield 1;
  yield 2;
  console.log('somewhere in middle');
  yield 3;
  yield 4;
}
const iter = genFunc(); //the execution of a generator function doesnot start at time of calling function
console.log(iter); //Object [Generator] {}

console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());



===========================================================================================

