we have seen Promise constructor


new Promise(callback)

callback takes two parameters , resolve , reject


Promises --->value - default = undefined

Promises ---> state - default - Pending


new Promise((resolve,reject)=>{
    //can write any sync or async code
})


Summary:
At the time when constructor generates a Promise object , 
it also generates a pair of functions called as resolve , reject 

generally executor callback , will wrap async or sync logic 

callback function will get executed and we get promise object 


===============================================================================================

Consuming a Promise:

once we get placeholder from the promise , we can start consuming it 

say we have fetch(''), say this returns  a promise 

we can attach the functionality we need to execute on the promise object , once promise 
is fulfilled or rejected 


with promise object we get 

.then() function that takes 2 parameters , 1st is fulfilmentHandler function
and 2nd parameter is rejectionHandler function , that we have to implement ourselves 

=============================================================================

function getRandomNum(num) {
  return Number(Math.floor(Math.random() * num));
}

function promiseCreator() {
  return new Promise((resolve, reject) => {
    let num = getRandomNum(5);
    console.log(num);
    setTimeout(() => {
      console.log(num);
      if (num % 2 == 0) {
        resolve(num);
      } else {
        console.log(num);
        reject(num);
      }
    }, 5000);
  });
}

function promiseCreator2() {
  return new Promise((resolve, reject) => {
    let num = getRandomNum(5);

    if (num % 2 == 0) {
      resolve(num);
    } else {
      console.log(num);
      reject(num);
    }
  });
}

console.log('Starting......');
let x = promiseCreator();

console.log(x);
x.then(
  function (value) {
    console.log(value);
    console.log('inside fulfilHandler', value);
    console.log(x);
  },
  function (value) {
    console.log(value);
    console.log('inside rejectionHandler', value);
    console.log(x);
  }
);

console.log('Promise function sync code');
let z = promiseCreator2();
console.log(z);
z.then(
  (value) => {
    console.log(value);
  },
  (val) => {
    console.log(val);
  }
);
=============================================================================


A promise has - value - value which we pass in the resolve or reject default will be undefined
state - Pending , Resolve , Reject 
onfulfilment -  we can have array of functions 
onRejection - we can have array of functions which we can attach 
=============================================================================


function createProm() {
  return new Promise((resolve, reject) => {
    console.log('inside promise');
    resolve('promsie resolved');
  });
}

setTimeout(() => {
  console.log('inside setTimeout');
}, 0);

console.log('hello');

let p = createProm();
console.log(p);

p.then(
  (value) => {
    console.log('Status is ', value);
  },
  (value) => {
    console.log('Status is ', value);
  }
);
/*
hello
inside promise
Promise { 'promsie resolved' }
Status is  promsie resolved
inside setTimeout
*/

At any point of time , if event loop has a choice between micro task queue or 
callback queue(macro task queue) event loop will always prefer micro task queue

that is why even if there is a timer function waiting in callback queue , it
still got executed later 
=============================================================================



=============================================================================




=============================================================================




=============================================================================




=============================================================================
