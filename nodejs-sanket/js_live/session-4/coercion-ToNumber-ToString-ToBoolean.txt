ToBoolean

undefined  - false
null - false
Number - if number is +0,-0, NaN - it return false, otherwise return true
String - if length zero - false, else true 


undefined, null ,+0, -0, empty string , false  ----> all these are falsy values 

console.log(Boolean(undefined));

console.log(Boolean(-0));
console.log(Boolean(null));

console.log(Boolean(+0));

console.log(Boolean(NaN));

console.log(Boolean(''));

//all above are falsy values

console.log(Boolean({})); //true
console.log(Boolean(Symbol(12))); //true

console.log(Boolean(Symbol(0))); //true

=========================================================================================
abstract and strict equality comparision:


abstract equality:
if type of x equal to type of y ,
if they are not equal , abstract equality does type coercion 


strict equality:
doesnot do type coercion 


console.log(undefined == null); //true - because of type coercion

let x = 10;
let y = '10';
//if x is of number type then , y will also get converted to number
//because of abstract equality
console.log(x == y); //true
console.log(NaN == NaN); //false

console.log(undefined === undefined); //true
console.log(null === null); //true
console.log(NaN === NaN); //false

console.log(1 == true); //true
console.log('1' == true); //true

console.log(null == false); //false



=========================================================================================
let obj = {
  x: 10,
  valueOf() {
    return 100;
  },
  toString() {
    return 'a';
  },
};

console.log(99 == obj); //as 99 is number , we get valueOf called 99==100 , false
console.log(100 == obj); // true

console.log('a' == obj.toString()); //true

console.log(typeof null); //object

console.log({ x: 10 } === { x: 10 }); //false





=========================================================================================
ToString:

undefined - "undefined"

Null - "null"

true - "true"

false - "false"


console.log('' + []); //gives empty string




=========================================================================================


console.log(0 - '010'); //string with 0 preceding considered as decimal number ->  -10
console.log(0 - 010); //converted to octal number --> 0-8 = -8
console.log(0 - 0xb); //-11 , hexadecimal
console.log(0 - '0xb'); //-11 ,hexadecimal

console.log([] - 1); //-1
console.log([''] - 1); //-1
console.log(['0'] - 1); //-1





=========================================================================================
x = {};
by default if i do 
x.toString();//it will give [object Object]

//we can override this 
x = {toString(){return "Apple"}};
x.toString();//Apple 


=========================================================================================





=========================================================================================



=========================================================================================





