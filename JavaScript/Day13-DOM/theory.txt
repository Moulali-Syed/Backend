Advanced DOM and Events:
===========================
DOM is interface with js and browsers

this allows us to make javascript interact wiith browsers
DOM is an API that contains lots of methods and properties to interact with DOM tree 

everything in html goes to DOM 

=================================================================================
Selecting , Creating and Deleting Elements:

console.log(document.documentElement);//gives entire html 

console.log(document.head);//gives complete head 
console.log(document.body);//gives complete body 

document.querySelector('.header');//selects the section with header class - first match 
const allSections = document.querySelectorAll('.section');//selects all elements with class section
//returns a nodeList

document.getElementById('section--1');
const allButtons = document.getElementsbyTagName('button');
//returns HTMLCollection , also called live collection , if DOM changes then this collection changes automatically

//it is not same with NodeList 

document.getElementsByClassName('btn');//returns a HTMLCollection


//creating and inserting elements:

insertAdjacentHTML
const message = document.createElement('div');//creates a DOM element 
message.classList.add('cookie-message');//adding a class 
message.textContent = 'We use cookies for analytics';
 message.innerHTML = 'We use cookies for analytics <button class="btn btn--close-cookie">Got it</button'

 header.prepend(message);//insert element as first child
 header.append(message);//insert as last child 

header.append(message.cloneNode(true));

header.before(message);//insert as sibling 
header.after(message);//insert as sibling 


//** delete elements 
document.querySelector('.btn--close-cookie').addEventListener('click',function(){
    message.remove();
    //message.parentElement.removeChild(message); - older way of deleting 
})

=================================================================================
Styles , Attributes , classes:
------------------------------

//styles 
message.style.backgroundColor = '#37383d';
message.style.width = '120%';

//to get what styles are applied on an element 
console.log(getComputedStyle(message));
console.log(getComputedStyle(message).color);

message.style.height = Number.parseFloat(getComputedStyle(message).height,10) + 40 +'px';

//the varibale values we set in the :root of css also be changed as below 
document.documentElement.style.setProperty('--color-primary','orangered');

//******* Attributes **************//
const logo = document.querySelector('.nav__logo');
console.log(logo.alt);
console.log(logo.src);
console.log(logo.className);//give class - value 
//works for standard attributes only 
logo.alt = 'Beautiful Minimalist logo';

//to access non standard attributes
console.log(logo.getAttribute('designer'));
logo.setAttribute('company','Bankist');

//to get relative version of src attribute of image 
console.log(logo.getAttribute('src'));


//Data Attributes
<img src="" alt="" data-version-number = "3.0"/>
console.log(logo.dataset.versionNumber);//we must call using camelCase 
version-number  as versionNumber , attribute starting with data will be in dataset 
helpful when we are storing data in frontend

//classes
logo.classList.add('c');//we can also pass multiple values ('c','j')
logo.classList.remove('c','j');
logo.classList.toggle('c');
logo.classList.contains('c');

logo.className = 'apple';//dont use this because it overrides all classes and allows only one class on element 

=================================================================================
Implementing Smooth scroll:
on clicking a button , we want to scroll to a section we want 

const btnScrollTo  = document.querySelector('.btn--scroll-to');
const section1 = document.querySelector('#section--1');

btnScrollTo.addEventListener('click',function(e){
    const s1coords = section1.getBoundingClientRect();
    console.log(s1coords);//we get x - distance from left browser border , y - distance from top of browser  

    //get current scroll position
    console.log('Current scroll (x/y)',window.pageXOffset,window.pageYOffset);

    //we can read height width of viewport
    console.log(document.documentElement.clientHeight,document.documentElement.clientWidth);
/*
    //scrolling
    window.scrollTo(s1coords.left+window.pageXOffset,s1coords.top+window.pageYOffset);

    //to implement smooth scroll 
    window.scrollTo({
        left:s1coords.left+window.pageXOffset ,
        top: s1coords.top+window.pageYOffset,
        behaviour : 'smooth', 
    });
*/
//modern way of doing smooth scroll - no need of any calculations
    section1.scrollIntoView({behaviour:'smooth'});
})
=================================================================================
Types of Events and Event Handlers:

event is a signal that something happened on webpage 

const h1 = document.querySelector('h1');
h1.addEventListener('mouseenter',function(e){
    alert('addEventListener: Great! You are reading the heading');
});//this is like we move our mouse cursor on element 

//we have mouseleave 

//below is old way of doing 
h1.onmouseenter = function(e){
    alert('addEventListener: Great! You are reading the heading');
}

---------------
we can also remove event listener - *** a very nice pattern when we want event listener only once *** 

const alertH1 = function(e){
    alert('addEventListener: Great! You are reading the heading');

    h1.removeEventListener('mouseenter',alertH1);
}
h1.addEventListener('mouseenter',alertH1);


---------
we can also remove after certain time , using setTimeout 

const alertH1 = function(e){
    alert('addEventListener: Great! You are reading the heading');
    
}
h1.addEventListener('mouseenter',alertH1);

setTimeout(()=>{
    h1.removeEventListener('mouseenter',alertH1);
},3000);

=================================================================================
Event Propogation : Bubbling and Capturing

most of events have capturing and bubbling phase

capturing - start from the root html element and go till the actual element 

bubbling - from target element to the root html[document] element 
=================================================================================
Event Propogation in Practice:

const random = (min,max)=> Math.floor(Math.random()*(max-min+1)+min);

const randomColor = () => `rgb(${randomInt(0,255)},${randomInt(0,255)},${randomInt(0,255)})`;


document.querySelector('.nav__link').addEventListener('click',function(e){
    this.style.backgroundColor = randomColor();

    //to stop Propogation
    //e.stopPropogation();
});

document.querySelector('.nav__links').addEventListener('click',function(e){
    this.style.backgroundColor = randomColor();
});

document.querySelector('.nav').addEventListener('click',function(e){
    this.style.backgroundColor = randomColor();
});

hearing to all bubbling from child 
-----------

to happen capturing first then passs a third parameter in addEventListener as true , defalut is false

document.querySelector('.nav').addEventListener('click',function(e){
    this.style.backgroundColor = randomColor();
},true);
=================================================================================
Lets use the power of event bubbling to implement event delegation:

on clicking a nav link , it moves to corresponding section smoothly - lets implement this  

//Page navigation - smoothly 

document.querySelectorAll('.nav__link').forEach(function(el){
    el.addEventListener('click',function(e){
        e.preventDefault();
        const id = this.getAttribute('href');
        console.log(id);
        document.querySelector(id).scrollIntoView({behaviour:'smooth'});
    })
})
by above way we are attaching event listener to every nav link , which is not an efficient way
lets use event delegation 


//event delegation
//1.add event listener to common parent element
//2.Determine what element originated the event 

document.querySelector('.nav__links').addEventListener('click',function(e){
    console.log(e.target);//helps us to know where event has happened 

    //matching strategy
    if(e.target.classList.contains('nav_link')){
        e.preventDefault();
        const id = e.target.getAttribute('href');
        console.log(id);
        document.querySelector(id).scrollIntoView({behaviour:'smooth'});
    }
});
=================================================================================
Traversing DOM:

const h1 = document.querySelector('h1');
console.log(h1.querySelectorAll('.highlight'));//all elements with the class deep inside will also be selected 
console.log(h1.childNodes);//gives textnode,elements - not much useful

console.log(h1.children);//gives HTMLCollection

h1.firstElementChild.style.color = 'white';
h1.lastElementChild.style.color = 'orangered';

//parent 
console.log(h1.parentNode);
console.log(h1.parentElement);

//to get a parent of any hierarchy - closest finds parent 
h1.closest('.header').style.background = 'var(--gradient-secondary)';

//siblings
h1.previousElementSibling;
h1.nextElementSibling;

h1.previousSibling;//not used much
h1.nextSibling;//not used much 

//get all siblings
h1.parentElement.children;


=================================================================================
Building Tabbed component:

//Tabbed component
const tabs = document.querySelectorAll('.operations__tab');
const tabsContainer = document.querySelector('operations__tab-container');
const tabsContent = document.querySelectorAll('.operations__content');

tabsContainer.addEventListener('click', function (e) {
  const clicked = e.target.closest('.operatins__tab');
  console.log(clicked);

  if (!clicked) return;

  tabs.forEach((t) => t.classList.remove('operations__tab--active'));
  tabsContent.forEach((c) => c.classList.remove('operations__content--active'));
  clicked.classList.add('operations__tab--active');

  //Activate content area
  document
    .querySelector(`.operations__content--${clicked.dataset.tab}`)
    .classList.add('operations__content--active');
});



=================================================================================
Passing arguments to Event Handlers:

nav.addEventListener('mouseover',function(e){
    if(e.target.classList.contains('nav__link')){
        const clicked = e.target;
        const sibling = link.closest('.nav').querySelector('.nav__link');
        const logo = link.closest('.nav').querySelector('img');
        siblings.forEach(el=>{
            if(el!=link) el.style.opacity = 0.5;
        });
        logo.style.opacity = 0.5;
    }
})

nav.addEventListener('mouseout',function(e){
    
})
=================================================================================
Revealing elements on scroll:
const revealSection = function(entries,observer){

}
const sectionObserver = new IntersectionObserver(reve);

=================================================================================



=================================================================================





=================================================================================
